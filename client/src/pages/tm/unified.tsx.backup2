import React, { useState } from "react";
import { MainLayout } from "@/components/layout/main-layout";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Separator } from "@/components/ui/separator";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Plus,
  Save,
  Trash2,
  Search,
  FileText,
  Book,
  BookMarked,
  Upload,
  ChevronRight,
  X,
  Loader2,
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { formatDate } from "@/lib/utils";
import { Link } from "wouter";
import { useAuth } from "@/hooks/use-auth";

// Form schema for adding/editing TM entries
const tmEntryFormSchema = z.object({
  source: z.string().min(1, { message: "Source text is required" }),
  target: z.string().min(1, { message: "Target text is required" }),
  sourceLanguage: z.string().min(1, { message: "Source language is required" }),
  targetLanguage: z.string().min(1, { message: "Target language is required" }),
  context: z.string().optional(),
  status: z.string().default("100%"),
  resourceId: z.number().optional(),
});

// Form schema for adding new TM resource
const tmResourceFormSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters" }),
  description: z.string().optional(),
  defaultSourceLanguage: z.string().min(2, { message: "Source language is required" }),
  defaultTargetLanguage: z.string().min(2, { message: "Target language is required" }),
  project: z.string().optional(),
  isActive: z.boolean().default(true),
});

type TmEntryFormValues = z.infer<typeof tmEntryFormSchema>;
type TmResourceFormValues = z.infer<typeof tmResourceFormSchema>;

export default function UnifiedTMPage() {
  const { toast } = useToast();
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const isAdmin = user?.role === "admin";
  
  // Search and filter states
  const [searchQuery, setSearchQuery] = useState("");
  const [sourceLanguageFilter, setSourceLanguageFilter] = useState<string>("all_source_languages");
  const [targetLanguageFilter, setTargetLanguageFilter] = useState<string>("all_target_languages");
  const [resourceFilter, setResourceFilter] = useState<string | undefined>(undefined);
  
  // Dialog states
  const [addEntryDialogOpen, setAddEntryDialogOpen] = useState(false);
  const [addResourceDialogOpen, setAddResourceDialogOpen] = useState(false);
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  
  // TM entry form setup
  const entryForm = useForm<TmEntryFormValues>({
    resolver: zodResolver(tmEntryFormSchema),
    defaultValues: {
      source: "",
      target: "",
      sourceLanguage: "",
      targetLanguage: "",
      context: "",
      status: "100%",
      resourceId: undefined,
    },
  });
  
  // TM resource form setup
  const resourceForm = useForm<TmResourceFormValues>({
    resolver: zodResolver(tmResourceFormSchema),
    defaultValues: {
      name: "",
      description: "",
      defaultSourceLanguage: "",
      defaultTargetLanguage: "",
      project: "",
      isActive: true,
    },
  });

  // Get all TM resources
  const { 
    data: tmResources = [], 
    isLoading: isLoadingResources 
  } = useQuery({
    queryKey: ["/api/tm/resources"],
    queryFn: async () => {
      try {
        const res = await apiRequest("GET", "/api/tm/resources");
        return res.json();
      } catch (error) {
        console.error("Error fetching TM resources:", error);
        return [];
      }
    },
  });

  // Get all TM entries
  const { 
    data: tmData = [], 
    isLoading: isLoadingEntries 
  } = useQuery({
    queryKey: ["/api/tm/all", resourceFilter],
    queryFn: async () => {
      try {
        const url =
          resourceFilter && resourceFilter !== "all_resources"
            ? `/api/tm/all?resourceId=${resourceFilter}`
            : "/api/tm/all";
        const res = await apiRequest("GET", url);
        return res.json();
      } catch (error) {
        console.error("Error fetching TM entries:", error);
        return [];
      }
    },
  });

  // Get unique languages from TM data
  const languages = React.useMemo(() => {
    if (!tmData) return { source: [], target: [] };

    // Get unique source languages
    const sourceLanguagesSet = new Set<string>();
    tmData.forEach((item: any) =>
      sourceLanguagesSet.add(item.sourceLanguage),
    );
    const sourceLanguages = Array.from(sourceLanguagesSet);

    // Get unique target languages
    const targetLanguagesSet = new Set<string>();
    tmData.forEach((item: any) =>
      targetLanguagesSet.add(item.targetLanguage),
    );
    const targetLanguages = Array.from(targetLanguagesSet);

    return {
      source: sourceLanguages,
      target: targetLanguages,
    };
  }, [tmData]);

  // Filtered TM entries
  const filteredTm = React.useMemo(() => {
    if (!tmData) return [];

    return tmData.filter((entry: any) => {
      const matchesSearch = searchQuery
        ? entry.source.toLowerCase().includes(searchQuery.toLowerCase()) ||
          entry.target.toLowerCase().includes(searchQuery.toLowerCase())
        : true;

      const matchesSourceLang =
        sourceLanguageFilter && sourceLanguageFilter !== "all_source_languages"
          ? entry.sourceLanguage === sourceLanguageFilter
          : true;

      const matchesTargetLang =
        targetLanguageFilter && targetLanguageFilter !== "all_target_languages"
          ? entry.targetLanguage === targetLanguageFilter
          : true;
          
      const matchesResource = 
        resourceFilter != null
          ? entry.resourceId === parseInt(resourceFilter)
          : true;

      return matchesSearch && matchesSourceLang && matchesTargetLang && matchesResource;
    });
  }, [tmData, searchQuery, sourceLanguageFilter, targetLanguageFilter, resourceFilter]);

  // Add new TM entry
  const addEntryMutation = useMutation({
    mutationFn: async (data: TmEntryFormValues) => {
      const response = await apiRequest("POST", "/api/tm", data);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/tm/all"] });
      entryForm.reset();
      setAddEntryDialogOpen(false);
      toast({
        title: "Entry added",
        description: "The TM entry has been added successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to add TM entry",
        variant: "destructive",
      });
    },
  });

  // Add new TM resource
  const addResourceMutation = useMutation({
    mutationFn: async (data: TmResourceFormValues) => {
      const response = await apiRequest("POST", "/api/tm/resource", data);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/tm/resources"] });
      resourceForm.reset();
      setAddResourceDialogOpen(false);
      toast({
        title: "TM resource added",
        description: "The TM resource has been added successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to add TM resource",
        variant: "destructive",
      });
    },
  });

  // Delete TM entry (placeholder - implement in future)
  function handleDeleteEntry(id: number) {
    if (window.confirm("Are you sure you want to delete this TM entry?")) {
      toast({
        title: "Feature not implemented",
        description: "The delete TM entry feature is not yet implemented.",
        variant: "destructive",
      });
    }
  }

  // Delete TM resource (placeholder - implement in future)
  function handleDeleteResource(id: number) {
    if (window.confirm("Are you sure you want to delete this TM resource? This will also delete all entries associated with this resource.")) {
      toast({
        title: "Feature not implemented",
        description: "The delete TM resource feature is not yet implemented.",
        variant: "destructive",
      });
    }
  }

  // Form submission handlers
  function onSubmitEntry(data: TmEntryFormValues) {
    addEntryMutation.mutate(data);
  }

  function onSubmitResource(data: TmResourceFormValues) {
    addResourceMutation.mutate(data);
  }
  
  // Handle TM resource click for filtering
  function handleResourceClick(resourceId: string) {
    setResourceFilter(resourceId);
  }

  const adminButtons = isAdmin ? (
    <>
      <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>
        <DialogTrigger asChild>
          <Button variant="outline" className="w-full justify-start">
            <Upload className="mr-2 h-4 w-4" />
            Upload TM File
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload TM File</DialogTitle>
            <DialogDescription>
              Upload a translation memory file to import entries.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="tmFile" className="text-right">
                File
              </Label>
              <Input id="tmFile" type="file" className="col-span-3" accept=".tmx,.xlsx,.csv" />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="tmResource" className="text-right">
                TM Resource
              </Label>
              <Select defaultValue="none">
                <SelectTrigger className="col-span-3" id="tmResource">
                  <SelectValue placeholder="Select TM Resource" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">None (Create New)</SelectItem>
                  {tmResources.map((resource: any) => (
                    <SelectItem key={resource.id} value={resource.id.toString()}>
                      {resource.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button type="submit">Upload</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      <Dialog open={addEntryDialogOpen} onOpenChange={setAddEntryDialogOpen}>
        <DialogTrigger asChild>
          <Button className="w-full justify-start">
            <Plus className="mr-2 h-4 w-4" />
            Add TM Entry
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New TM Entry</DialogTitle>
            <DialogDescription>
              Add a new entry to your translation memory.
            </DialogDescription>
          </DialogHeader>
          <Form {...entryForm}>
            <form
              onSubmit={entryForm.handleSubmit(onSubmitEntry)}
              className="space-y-4"
            >
              <FormField
                control={entryForm.control}
                name="sourceLanguage"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Source Language</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select source language" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="en">English</SelectItem>
                        <SelectItem value="ko">Korean</SelectItem>
                        <SelectItem value="ja">Japanese</SelectItem>
                        <SelectItem value="zh">Chinese</SelectItem>
                        <SelectItem value="es">Spanish</SelectItem>
                        <SelectItem value="fr">French</SelectItem>
                        <SelectItem value="de">German</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={entryForm.control}
                name="targetLanguage"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Target Language</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select target language" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="en">English</SelectItem>
                        <SelectItem value="ko">Korean</SelectItem>
                        <SelectItem value="ja">Japanese</SelectItem>
                        <SelectItem value="zh">Chinese</SelectItem>
                        <SelectItem value="es">Spanish</SelectItem>
                        <SelectItem value="fr">French</SelectItem>
                        <SelectItem value="de">German</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={entryForm.control}
                name="resourceId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>TM Resource</FormLabel>
                    <Select
                      onValueChange={(value) => {
                        field.onChange(
                          value === "none" ? undefined : parseInt(value),
                        );
                      }}
                      defaultValue={field.value?.toString() || "none"}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select TM Resource" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="none">No resource</SelectItem>
                        {tmResources.map((resource: any) => (
                          <SelectItem
                            key={resource.id}
                            value={resource.id.toString()}
                          >
                            {resource.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={entryForm.control}
                name="source"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Source Text</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter source text" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={entryForm.control}
                name="target"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Target Text</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter target text" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={entryForm.control}
                name="context"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Context (Optional)</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Enter context for this entry"
                        {...field}
                        value={field.value || ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={entryForm.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Status</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select status" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="MT">MT</SelectItem>
                        <SelectItem value="Fuzzy">Fuzzy</SelectItem>
                        <SelectItem value="100%">100%</SelectItem>
                        <SelectItem value="Reviewed">Reviewed</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <Button
                  type="submit"
                  disabled={addEntryMutation.isPending}
                >
                  {addEntryMutation.isPending ? "Adding..." : "Add Entry"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      <Dialog open={addResourceDialogOpen} onOpenChange={setAddResourceDialogOpen}>
        <DialogTrigger asChild>
          <Button className="w-full justify-start">
            <Plus className="mr-2 h-4 w-4" />
            Add TM Resource
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New TM Resource</DialogTitle>
            <DialogDescription>
              Add a new translation memory resource.
            </DialogDescription>
          </DialogHeader>
    </>
  ) : null;

  // Page header content
  const pageHeader = (
    <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
      <div>
        <h1 className="text-2xl font-bold">Translation Memory</h1>
        <p className="text-muted-foreground mt-1">
          Search and manage translation memory entries and resources
        </p>
      </div>
      
      {/* Mobile-only admin buttons */}
      {isAdmin && (
        <div className="flex gap-2 md:hidden">
          <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm">
                <Upload className="mr-2 h-4 w-4" />
                Upload
              </Button>
            </DialogTrigger>
          </Dialog>
          
          <Dialog open={addEntryDialogOpen} onOpenChange={setAddEntryDialogOpen}>
            <DialogTrigger asChild>
              <Button size="sm">
                <Plus className="mr-2 h-4 w-4" />
                Add Entry
              </Button>
            </DialogTrigger>
          </Dialog>
        </div>
      )}
    </div>
  );

  return (
    <MainLayout 
      actionButtons={adminButtons}
      pageHeader={pageHeader}
    >
      <div className="container max-w-screen-xl mx-auto">
                  <Form {...entryForm}>
                    <form
                      onSubmit={entryForm.handleSubmit(onSubmitEntry)}
                      className="space-y-4"
                    >
                      <FormField
                        control={entryForm.control}
                        name="sourceLanguage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Source Language</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select source language" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="en">English</SelectItem>
                                <SelectItem value="ko">Korean</SelectItem>
                                <SelectItem value="ja">Japanese</SelectItem>
                                <SelectItem value="zh">Chinese</SelectItem>
                                <SelectItem value="es">Spanish</SelectItem>
                                <SelectItem value="fr">French</SelectItem>
                                <SelectItem value="de">German</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={entryForm.control}
                        name="targetLanguage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Target Language</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select target language" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="en">English</SelectItem>
                                <SelectItem value="ko">Korean</SelectItem>
                                <SelectItem value="ja">Japanese</SelectItem>
                                <SelectItem value="zh">Chinese</SelectItem>
                                <SelectItem value="es">Spanish</SelectItem>
                                <SelectItem value="fr">French</SelectItem>
                                <SelectItem value="de">German</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={entryForm.control}
                        name="resourceId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>TM Resource</FormLabel>
                            <Select
                              onValueChange={(value) => {
                                field.onChange(
                                  value === "none" ? undefined : parseInt(value),
                                );
                              }}
                              defaultValue={field.value?.toString() || "none"}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select TM Resource" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="none">No resource</SelectItem>
                                {tmResources.map((resource: any) => (
                                  <SelectItem
                                    key={resource.id}
                                    value={resource.id.toString()}
                                  >
                                    {resource.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={entryForm.control}
                        name="source"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Source Text</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter source text" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={entryForm.control}
                        name="target"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Target Text</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter target text" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={entryForm.control}
                        name="context"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Context (Optional)</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="Enter context for this entry"
                                {...field}
                                value={field.value || ""}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={entryForm.control}
                        name="status"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Status</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="MT">MT</SelectItem>
                                <SelectItem value="Fuzzy">Fuzzy</SelectItem>
                                <SelectItem value="100%">100%</SelectItem>
                                <SelectItem value="Reviewed">Reviewed</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <DialogFooter>
                        <Button
                          type="submit"
                          disabled={addEntryMutation.isPending}
                        >
                          {addEntryMutation.isPending ? "Adding..." : "Add Entry"}
                        </Button>
                      </DialogFooter>
                    </form>
                  </Form>
                </DialogContent>
              </Dialog>
              
              <Dialog open={addResourceDialogOpen} onOpenChange={setAddResourceDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="outline">
                    <Plus className="mr-2 h-4 w-4" />
                    Add Resource
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Add New TM Resource</DialogTitle>
                    <DialogDescription>
                      Add a new translation memory resource.
                    </DialogDescription>
                  </DialogHeader>
                  <Form {...resourceForm}>
                    <form
                      onSubmit={resourceForm.handleSubmit(onSubmitResource)}
                      className="space-y-4"
                    >
                      <FormField
                        control={resourceForm.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Name</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter resource name" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={resourceForm.control}
                        name="description"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Description</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="Enter resource description"
                                {...field}
                                value={field.value || ""}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={resourceForm.control}
                        name="defaultSourceLanguage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Default Source Language</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select source language" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="en">English</SelectItem>
                                <SelectItem value="ko">Korean</SelectItem>
                                <SelectItem value="ja">Japanese</SelectItem>
                                <SelectItem value="zh">Chinese</SelectItem>
                                <SelectItem value="es">Spanish</SelectItem>
                                <SelectItem value="fr">French</SelectItem>
                                <SelectItem value="de">German</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={resourceForm.control}
                        name="defaultTargetLanguage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Default Target Language</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select target language" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="en">English</SelectItem>
                                <SelectItem value="ko">Korean</SelectItem>
                                <SelectItem value="ja">Japanese</SelectItem>
                                <SelectItem value="zh">Chinese</SelectItem>
                                <SelectItem value="es">Spanish</SelectItem>
                                <SelectItem value="fr">French</SelectItem>
                                <SelectItem value="de">German</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={resourceForm.control}
                        name="project"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Project (Optional)</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="Enter associated project"
                                {...field}
                                value={field.value || ""}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <DialogFooter>
                        <Button
                          type="submit"
                          disabled={addResourceMutation.isPending}
                        >
                          {addResourceMutation.isPending
                            ? "Adding..."
                            : "Add Resource"}
                        </Button>
                      </DialogFooter>
                    </form>
                  </Form>
                </DialogContent>
              </Dialog>
            </div>
          )}
        </div>
        
        <p className="text-muted-foreground mb-6">
          Search and manage translation memory entries and resources
        </p>

        {/* TM Resource List Section */}
        <div className="bg-card border rounded-lg p-6 mb-8">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-2">
              <BookMarked className="h-5 w-5" />
              <h3 className="text-xl font-semibold">TM Resources</h3>
            </div>
          </div>

          <div className="rounded-md border overflow-hidden">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Default Languages</TableHead>
                  <TableHead>Entries</TableHead>
                  <TableHead>Created</TableHead>
                  {isAdmin && <TableHead className="text-right">Actions</TableHead>}
                </TableRow>
              </TableHeader>
              <TableBody>
                {isLoadingResources ? (
                  <TableRow>
                    <TableCell colSpan={isAdmin ? 6 : 5} className="text-center py-8 text-muted-foreground">
                      Loading TM resources...
                    </TableCell>
                  </TableRow>
                ) : tmResources.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={isAdmin ? 6 : 5} className="text-center py-8 text-muted-foreground">
                      No TM resources found
                    </TableCell>
                  </TableRow>
                ) : (
                  tmResources.map((resource: any) => (
                    <TableRow 
                      key={resource.id} 
                      className={`cursor-pointer hover:bg-muted/50 ${resourceFilter === resource.id ? 'bg-muted/70' : ''}`}
                      onClick={() => handleResourceClick(resource.id.toString())}
                    >
                      <TableCell className="font-medium">{resource.name}</TableCell>
                      <TableCell>{resource.description || "—"}</TableCell>
                      <TableCell>
                        <div className="flex flex-col">
                          <span className="text-xs text-muted-foreground">
                            Source: {resource.defaultSourceLanguage.toUpperCase()}
                          </span>
                          <span className="text-xs text-muted-foreground">
                            Target: {resource.defaultTargetLanguage.toUpperCase()}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        {tmData
                          ? tmData.filter((entry: any) => entry.resourceId === resource.id).length
                          : 0}
                      </TableCell>
                      <TableCell className="text-muted-foreground">
                        {formatDate(resource.createdAt)}
                      </TableCell>
                      {isAdmin && (
                        <TableCell className="text-right">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleDeleteResource(resource.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      )}
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </div>

        {/* TM Search Section */}
        <div className="bg-card border rounded-lg p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              <h3 className="text-xl font-semibold">Search TM</h3>
              
              {resourceFilter && (
                <Badge 
                  variant="secondary" 
                  className="ml-3 py-1 px-3 cursor-pointer hover:bg-muted/70 flex items-center gap-1"
                  onClick={() => setResourceFilter(undefined)}
                >
                  Resource: {
                    tmResources.find((r: any) => r.id.toString() === resourceFilter)?.name || 'Unknown'
                  }
                  <X className="h-3 w-3 ml-1" />
                </Badge>
              )}
            </div>
          </div>

          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                type="text"
                placeholder="Search translation memory..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <Select
              value={sourceLanguageFilter}
              onValueChange={setSourceLanguageFilter}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Source language" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all_source_languages">All Source Languages</SelectItem>
                {languages.source.map((lang) => (
                  <SelectItem key={lang} value={lang}>
                    {lang.toUpperCase()}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select
              value={targetLanguageFilter}
              onValueChange={setTargetLanguageFilter}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Target language" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all_target_languages">All Target Languages</SelectItem>
                {languages.target.map((lang) => (
                  <SelectItem key={lang} value={lang}>
                    {lang.toUpperCase()}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="rounded-md border overflow-hidden">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Source</TableHead>
                  <TableHead>Target</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Resource</TableHead>
                  <TableHead>Created At</TableHead>
                  <TableHead>Modified By</TableHead>
                  {isAdmin && <TableHead className="text-right">Actions</TableHead>}
                </TableRow>
              </TableHeader>
              <TableBody>
                {isLoadingEntries ? (
                  <TableRow>
                    <TableCell colSpan={isAdmin ? 7 : 6} className="text-center py-8 text-muted-foreground">
                      Loading TM entries...
                    </TableCell>
                  </TableRow>
                ) : filteredTm.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={isAdmin ? 7 : 6} className="text-center py-8 text-muted-foreground">
                      No TM entries found
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredTm.map((entry: any) => (
                    <TableRow key={entry.id}>
                      <TableCell className="max-w-xs truncate">{entry.source}</TableCell>
                      <TableCell className="max-w-xs truncate">{entry.target}</TableCell>
                      <TableCell>
                        <div className="flex flex-col">
                          <Badge variant={entry.status === "Reviewed" ? "default" : "outline"} className="w-fit">
                            {entry.status}
                          </Badge>
                          <div className="text-xs text-muted-foreground mt-1">
                            {entry.sourceLanguage?.toUpperCase()} → {entry.targetLanguage?.toUpperCase()}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        {entry.resourceId && tmResources ? 
                          (tmResources.find((r: any) => r.id === entry.resourceId)?.name || "—") 
                          : (
                            <span className="text-muted-foreground italic">
                              None
                            </span>
                          )}
                      </TableCell>
                      <TableCell className="text-sm text-muted-foreground">
                        {formatDate(entry.createdAt)}
                      </TableCell>
                      <TableCell className="text-sm text-muted-foreground">
                        {entry.modifiedBy || "—"}
                      </TableCell>
                      {isAdmin && (
                        <TableCell className="text-right">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleDeleteEntry(entry.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      )}
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}