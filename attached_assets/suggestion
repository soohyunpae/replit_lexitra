# üìÑ Document View Segment Delay Analysis & Optimization Plan

This document outlines the source of rendering delay issues observed when editing or changing the status of segments in Lexitra‚Äôs Document View and Segment Editor, along with proposed solutions.

---

## ‚ùó Problem Description

After introducing the Document View mode, a delay has been observed when editing a segment or toggling its status. The UI does not immediately reflect changes, even though they are eventually saved and correct.

---

## üîç Key Files Involved

- `client/src/components/translation/doc-segment-authenticated.tsx`
- `client/src/hooks/useEditingState.ts`

These files handle the UI, local state, and API communication for individual segment edits.

---

## üß® Identified Root Causes

| Issue | Description |
|-------|-------------|
| Nested state updates | Editing a segment triggers multiple levels of state: local state ‚Üí API ‚Üí parent state ‚Üí global update |
| Query invalidation | `react-query` or cache logic is causing unnecessary refetches, delaying the visible update |
| Lack of shared state | Document View and Segment Editor have separate states, leading to sync lag |
| No optimistic update | UI waits for API success before updating, causing perceived delay |

---

## ‚úÖ Recommended Solutions

### 1. Optimistic Updates
- Update UI state immediately upon user action (e.g., toggle status), then perform API call
- If API fails, rollback to previous state

```ts
setLocalStatus(newStatus); // update UI immediately
try {
  await updateSegmentStatusApiCall(...);
} catch {
  setLocalStatus(prevStatus); // rollback on failure
}

### 2. Query Invalidation Optimization
	‚Ä¢	Invalidate only affected segments rather than the whole document/project
	‚Ä¢	Avoid refetching unless necessary

### 3. State Sharing Improvement
	‚Ä¢	Introduce shared state (e.g., context or Zustand store) for segment data
	‚Ä¢	Allow Document View and Segment Editor to reflect each other‚Äôs updates instantly

### 4. Batch State Updates
	‚Ä¢	Use startTransition or similar batching logic to minimize intermediate re-renders

üß≠ Summary
	‚Ä¢	Delays in segment update visibility stem from cascading state updates and aggressive refetch behavior
	‚Ä¢	Applying optimistic UI, query scoping, and shared segment state will significantly improve responsiveness

‚∏ª

These changes can be introduced incrementally, starting with optimistic updates inside useEditingState.ts and decoupling unnecessary invalidations. Further tuning should focus on improving the shared segment cache between views.